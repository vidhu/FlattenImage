{"version":3,"sources":["../index.js"],"names":["threshold","maxDelta","Merge","pngBuffs","Promise","all","map","pngBuff","resolve","PNG","sync","read","then","pngs","base","polies","splice","diff","poly","calcDiff","combined","reduce","acc","combineDiff","write","y","height","x","width","idx","data","copyTo","delta","colorDelta","img1","img2","k","m","yOnly","a1","a2","r1","blend","g1","b1","r2","g2","b2","rgb2y","i","rgb2i","q","rgb2q","r","g","b","c","a","to","from","pos","alpha"],"mappings":"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","sourcesContent":["import { PNG } from 'pngjs';\n\nconst threshold = 0.05;\nconst maxDelta = 35215 * threshold * threshold;\n\nexport const Merge = pngBuffs =>\n  Promise.all(\n    pngBuffs.map(\n      pngBuff => Promise.resolve(PNG.sync.read(pngBuff))\n    )\n  ).then(pngs => {\n    const base = pngs[0];\n    const polies = pngs.splice(1);\n\n    const diff = polies.map(poly => calcDiff(base, poly));\n    const combined = diff.reduce((acc, poly) => combineDiff(acc, poly), base);\n    return PNG.sync.write(combined);\n  });\n\nconst combineDiff = (base, diff) => {\n  for (var y = 0; y < base.height; y++) {\n    for (var x = 0; x < base.width; x++) {\n      let idx = (base.width * y + x) << 2;\n      if (diff.data[idx + 3]) {\n        copyTo(base, diff, idx);\n      }\n    }\n  }\n  return base;\n};\n\nconst calcDiff = (base, poly) => {\n  const diff = new PNG({ width: base.width, height: base.height });\n\n  for (var y = 0; y < base.height; y++) {\n    for (var x = 0; x < base.width; x++) {\n      let idx = (base.width * y + x) << 2;\n\n      let delta = colorDelta(base.data, poly.data, idx, idx);\n      if (delta > maxDelta) {\n        diff.data[idx] = poly.data[idx];\n        diff.data[idx + 1] = poly.data[idx + 1];\n        diff.data[idx + 2] = poly.data[idx + 2];\n        diff.data[idx + 3] = 255;\n      }\n    }\n  }\n\n  return diff;\n};\n\nconst colorDelta = (img1, img2, k, m, yOnly) => {\n  var a1 = img1[k + 3] / 255,\n    a2 = img2[m + 3] / 255,\n    r1 = blend(img1[k + 0], a1),\n    g1 = blend(img1[k + 1], a1),\n    b1 = blend(img1[k + 2], a1),\n    r2 = blend(img2[m + 0], a2),\n    g2 = blend(img2[m + 1], a2),\n    b2 = blend(img2[m + 2], a2),\n    y = rgb2y(r1, g1, b1) - rgb2y(r2, g2, b2);\n\n  if (yOnly) return y; // brightness difference only\n\n  var i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2),\n    q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);\n\n  return 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;\n};\n\nconst rgb2y = (r, g, b) => {\n  return r * 0.29889531 + g * 0.58662247 + b * 0.11448223;\n};\nconst rgb2i = (r, g, b) => {\n  return r * 0.59597799 - g * 0.2741761 - b * 0.32180189;\n};\nconst rgb2q = (r, g, b) => {\n  return r * 0.21147017 - g * 0.52261711 + b * 0.31114694;\n};\n\n// blend semi-transparent color with white\nconst blend = (c, a) => {\n  return 255 + (c - 255) * a;\n};\n\nconst copyTo = (to, from, pos, alpha) => {\n  to.data[pos] = from.data[pos];\n  to.data[pos + 1] = from.data[pos + 1];\n  to.data[pos + 2] = from.data[pos + 2];\n  to.data[pos + 3] = alpha ? alpha : 255;\n};\n"],"file":"index.js"}